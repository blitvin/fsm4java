<?xml version="1.0"?>
<!--
/*
* (C) Copyright Boris Litvin 2014-2016
* This file is part of StateMachine library.
*
*  StateMachine is free software: you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
*   the Free Software Foundation, either version 3 of the License, or
*   (at your option) any later version.
*
*   NioServer is distributed in the hope that it will be useful,
*   but WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*   GNU General Public License for more details.
*
*   You should have received a copy of the GNU General Public License
*   along with NioServer.  If not, see <http://www.gnu.org/licenses/>.
*/ 
-->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <xsd:simpleType name="transitionType">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="BASIC"/>
            <xsd:enumeration value="NULL"/>
            <xsd:enumeration value="CUSTOMIZED"/>
        </xsd:restriction>
    </xsd:simpleType>
    <xsd:element name="stateMachines">
        <xsd:complexType>
            <!-- xsd:sequence -->
            <xsd:sequence>
                <xsd:element name="stateMachine" maxOccurs="unbounded">
                    <xsd:complexType mixed="true">
                        <xsd:sequence>
                            <xsd:element name="state" maxOccurs="unbounded">
                                <xsd:complexType>
                                    <xsd:sequence>
                                        <xsd:element name="transition" minOccurs="0" maxOccurs="unbounded">
                                            <xsd:complexType>
                                                <xsd:attribute name="event" type="xsd:string"
                                                                   use="required" />
                                                <xsd:attribute name="type" type="transitionType"/>
                                                <xsd:anyAttribute processContents="lax"/>
                                            </xsd:complexType>
                                        </xsd:element>
                                        <xsd:element name="other_events_transition"
                                                         minOccurs="0" maxOccurs="1">
                                            <xsd:complexType>
                                                <xsd:attribute name="type" type="transitionType"/>
                                                <xsd:anyAttribute processContents="lax"/>
                                            </xsd:complexType>
                                        </xsd:element>
                                    </xsd:sequence>
                                    <xsd:attribute name="name" use="required" type="xsd:string" />
                                    <xsd:attribute name="class" type="xsd:string" /> <!-- class can be provided in build time-->
                                    <xsd:attribute name="isFinal" type="xsd:boolean" />
                                    <xsd:attribute name="isInitial" type="xsd:boolean" />
                                    <xsd:attribute name="enableAspect" type="xsd:boolean"/>
                                    <!-- type of state basic customized logic-->
                                    <xsd:anyAttribute processContents="lax"/>
                                </xsd:complexType>
                                <xsd:unique name="transition_unique">
                                    <xsd:selector xpath="state/transition" />
                                    <xsd:field xpath="@event" />
                                </xsd:unique>
                            </xsd:element>
                        </xsd:sequence>
                        <xsd:attribute name="name" type="xsd:string" use="required" />
                        <xsd:attribute name="type" default="SIMPLE">
                            <!-- actually default is not used see DOMStateMachineFactory.getFSMType()-->
                            <xsd:simpleType>
                                <xsd:restriction base="xsd:string">
                                    <xsd:enumeration value="BASIC"/>
                                    <xsd:enumeration value="SIMPLE"/>
                                    <xsd:enumeration value="MULTI_INTERNAL_EVENTS"/>
                                    <xsd:enumeration value="ASPECT"/>
                                </xsd:restriction>
                            </xsd:simpleType>
                        </xsd:attribute>
                        <xsd:attribute name="eventTypeClass" type="xsd:string"
                                           use="required" />
                    </xsd:complexType>
                    <xsd:unique name="state_name_unique">
                        <xsd:selector xpath="state" />
                        <xsd:field xpath="@name" />
                    </xsd:unique>
                </xsd:element>
                <!--/xsd:sequence>
                <xsd:sequence minOccurs="0" -->
                <xsd:element name="wrapper" minOccurs="0" maxOccurs="unbounded">
                    <xsd:complexType>
                        <xsd:attribute name="name" type="xsd:string" use="required" />
                        <xsd:attribute name="class" type="xsd:string" use="required" />
                        <xsd:attribute name="fsm" type="xsd:string" use="required" />
                    </xsd:complexType>
                </xsd:element>
                <!--/xsd:sequence-->
            </xsd:sequence>
        </xsd:complexType>
        <!-- xsd:unique name="unique_machine_name">
            <xsd:selector xpath="[stateMachine or wrapper]"/>
            <xsd:field xpath="@name"/>
        </xsd:unique-->
    </xsd:element>
</xsd:schema>