<?xml version="1.0" encoding="UTF-8"?>
<stateMachines>
    <stateMachine name="tokenizerFSM" eventTypeClass="org.blitvin.statemachine.expressionparser.TokensEnum" type="SIMPLE">
        <state name="RegularState" isInitial="true" isFinal="true">
            <transition event="CLOSING_BRACKET" toState="MinusIsToken"/>
            <transition event="DIGIT" toState="DigitState"/>
            <transition event="OTHER" toState="ErrorState"/>
            <transition event="MINUS" toState="MinusState"/>
            <other_events_transition toState="RegularState"/>
        </state>
        <state name="MinusState" isFinal="false">
            <transition event="DIGIT" toState="DigitState"/>
            <transition event="OTHER" toState="ErrorState"/>
            <transition event="MINUS" toState="MinusState"/>
            <other_events_transition toState="RegularState"/>
        </state>
        <state name="MinusIsToken" isFinal="true">
            <transition event="DIGIT" toState="DigitState"/>
            <transition event="OTHER" toState="ErrorState"/>
            <transition event="CLOSING_BRACKET" toState="MinusIsToken"/>
            <other_events_transition toState="RegularState"/>
        </state>
        <state name="DigitState" isFinal="true">
            <transition event="DIGIT" toState="DigitState"/>
            <transition event="OTHER" toState="ErrorState"/>
            <other_events_transition toState="MinusIsToken"/>
        </state>
        <state name="ErrorState" isFinal="true">
            <other_events_transition type="NULL"/>
        </state>
    </stateMachine>
    <stateMachine name="syntaxFSM" eventTypeClass="org.blitvin.statemachine.expressionparser.SyntaxTokensEnum"
                      type="SIMPLE">
        <state name="startOfExpression" isInitial="true" isFinal="false">
            <transition event="LITERAL" toState="startOfFactor"/>
            <transition event="OPEN_BRACKET" toState="startOfFactor"/>
            <other_events_transition toState="error"/>
        </state>
        <state name="startOfFactor" isFinal="false">
            <transition event="LITERAL" toState="factor"/>
            <transition event="OPEN_BRACKET" toState="startOfExpression"/>
            <other_events_transition toState="error"/>
        </state>
        <state name="multOrDiv" isFinal="false">
            <transition event="LITERAL" toState="factor"/>
            <transition event="OPEN_BRACKET" toState="startOfExpression"/>
            <other_events_transition toState="error"/>
        </state>
        <state name="factor" isFinal="false">
            <transition event="MULTIPLY_DIVIDE" toState="multOrDiv"/>
            <transition event="ADD_SUBSTRACT" toState="expression"/>
            <transition event="CLOSING_BRACKET" toState="expression"/>
            <transition event="END_OF_INPUT" toState="expression"/>
            <other_events_transition toState="error"/>
        </state>
        <state name="addOrSubst" isFinal="false">
            <transition event="LITERAL" toState="startOfFactor"/>
            <transition event="OPEN_BRACKET" toState="startOfFactor"/>
            <other_events_transition toState="error"/>
        </state>
        <state name="expression" isFinal="true">
            <transition event="LITERAL" toState="startOfFactor"/>
            <transition event="OPEN_BRACKET" toState="startOfFactor"/>
            <transition event="CLOSING_BRACKET" toState="factor"/>
            <transition event="ADD_SUBSTRACT" toState="addOrSubst"/>
            <other_events_transition toState="error"/>
        </state>
        <state name="error" isFinal="true">
            <other_events_transition type="NULL"/>
        </state>
    </stateMachine>
</stateMachines>